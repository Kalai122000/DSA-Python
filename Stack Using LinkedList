class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class Stack:
    def __init__(self):
        self.top = None

    def push(self, data):
        new_node = Node(data)
        new_node.next = self.top
        self.top = new_node

    def pop(self):
        if self.top:
            popped_data = self.top.data
            self.top = self.top.next
            return popped_data
        else:
            print("Stack is empty.")
            return None

    def peek(self):
        if self.top:
            return self.top.data
        else:
            print("Stack is empty.")
            return None

    def display(self):
        temp = self.top
        while temp:
            print(temp.data, "-->", end=" ")
            temp = temp.next
        print("None")

stack = Stack()

n = int(input())
for i in range(n):
    data = int(input())
    stack.push(data)

print("\nStack after pushing elements:")
stack.display()

k = int(input())
stack.push(k)
print("\nStack after pushing an element:")
stack.display()

popped_element = stack.pop()
if popped_element is not None:
    print("\nPopped element:", popped_element)
    print("Stack after popping an element:")
    stack.display()
    
peeked_element = stack.peek()
if peeked_element is not None:
    print("\nPeeked element:", peeked_element)
