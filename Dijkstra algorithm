import heapq

class Graph:
    def __init__(self):
        self.adj_list = {}

    def add_vertex(self, vertex):
        if vertex not in self.adj_list:
            self.adj_list[vertex] = []

    def add_edge(self, u, v, weight):
    
        if u not in self.adj_list:
            self.add_vertex(u)
        if v not in self.adj_list:
            self.add_vertex(v)

        self.adj_list[u].append((v, weight))
        self.adj_list[v].append((u, weight))

    def display(self):
        for vertex in self.adj_list:
            print(f"{vertex}: {self.adj_list[vertex]}")

    def dijkstra(self, start):
        distances = {vertex: float('inf') for vertex in self.adj_list}
        distances[start] = 0

        priority_queue = [(0, start)]  

        while priority_queue:
            current_dist, current_vertex = heapq.heappop(priority_queue)
            if current_dist > distances[current_vertex]:
                continue

            for neighbor, weight in self.adj_list[current_vertex]:
                distance = current_dist + weight

                if distance < distances[neighbor]:
                    distances[neighbor] = distance
                    heapq.heappush(priority_queue, (distance, neighbor))

        return distances

g = Graph()
g.add_edge("A", "B", 4)
g.add_edge("A", "C", 2)
g.add_edge("B", "C", 1)
g.add_edge("B", "D", 5)
g.add_edge("C", "D", 8)
g.add_edge("C", "E", 10)
g.add_edge("D", "E", 2)
g.add_edge("D", "Z", 6)
g.add_edge("E", "Z", 3)

print("Graph (Adjacency List with Weights):")
g.display()

print("\nShortest distances from A using Dijkstra:")
distances = g.dijkstra("A")
for vertex in distances:
    print(f"Distance to {vertex}: {distances[vertex]}")
