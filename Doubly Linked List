class Node:
    def __init__(self,data):
        self.data = data
        self.next = None
        self.prev = None
        
class Doublylist:
    def __init__(self):
        self.head = None
        self.tail = None
        
    def append(self,data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.prev = self.tail
            self.tail.next = new_node
            self.tail = new_node
            
    def prepend(self,data):
        new_node = Node(data)
        if self.head:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
        else:
            self.tail = None

    def insertend(self,data):
        self.append(data)

    def deletebegin(self):
        if self.head:
            self.head = self.head.next
            if self.head:
                self.head.prev =None

    def insert_at_position(self, data, position):
        new_node = Node(data)
        if position <= 0:
            new_node.next = self.head
            if self.head:
                self.head.prev = new_node
            self.head = new_node
            if self.tail is None:
                self.tail = new_node
        else:
            current = self.head
            for _ in range(position - 1):
                if current is None:
                    print("Invalid position. Inserting at the end.")
                    self.append(data)
                    return
                current = current.next

            new_node.prev = current
            new_node.next = current.next
            if current.next:
                current.next.prev = new_node
            else:
                self.tail = new_node
            current.next = new_node
                
    def deleteend(self):
        if self.head:
            if self.head == self.tail:
                self.head = None
                self.tail= None
                
            else:
                self.tail = self.tail.prev
                self.tail.next = None
                
    def display(self):
        temp = self.head
        while temp is not None:
            print(temp.data,"<-->",end=" ")
            temp = temp.next
        print("None")
        
d = Doublylist()
n = int(input())
for i in range (n):
    data = int(input())
    d.append(data)
d.display()
k = int(input())
d.prepend(k)
d.display()

m= int(input())
d.insertend(m)
d.display()

d.deletebegin()
d.display()

d.deleteend()
d.display()

h = int(input())
pos = int(input())
d.insert_at_position(h,pos)
d.display()


                
            
