class Node(object):
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
        self.height = 1
class AVLTree(object):
    def create (self,data):
        return Node(data)
    
    def insert(self, node, data):
        if node is None:
            return self.create(data)
        elif data < node.data:
            node.left = self.insert(node.left, data)
        else:
            node.right = self.insert(node.right, data)
        node.h = 1 + max(self.Height(node.left),self.Height(node.right))
        
        b = self.Balance(node)
        if b > 1 and data < node.left.data:
            return self.rightRotate(node)
        
        if b < -1 and data > node.right.data:
            return self.leftRotate(node)
        
        if b > 1 and data > node.left.data:
            node.left = self.leftRotate(node.left)
            return self.rightRotate(node)
        
        if b < -1 and data < node.right.data:
            node.right = self.rightRotate(node.right)
            return self.leftRotate(node)
        
        return node
    
    def leftRotate(self, z):
        y = z.right
        T2 = y.left
        y.left = z
        z.right = T2
        z.height = 1 + max(self.Height(z.left),self.Height(z.right))
        y.height = 1 + max(self.Height(y.left),self.Height(y.right))
        return y
    
    def rightRotate(self, z):
        y = z.left
        T3 = y.right
        y.right = z
        z.left = T3
        z.height = 1 + max(self.Height(z.left),self.Height(z.right))
        y.height = 1 + max(self.Height(y.left),self.Height(y.right))
        return y
    
    def Height(self, node):
        if node is None:
            return 0
        return node.height
    
    def Balance(self, node):
        if node is None:
            return 0
        return self.Height(node.left) - self.Height(node.right)
    
    def Inorder(self, root):
        if root is not None:
            self.Inorder(root.left)
            print(root.data,end=" ")
            self.Inorder(root.right)
    def preorder(self, root):
        if root is not None:
            
            print(root.data,end=" ")
            self.Inorder(root.left)
            self.Inorder(root.right)
        
T1 = AVLTree()
root = T1.create(100)
T1.insert(root, 50)
T1.insert(root, 125)
T1.insert(root, 25)
T1.insert(root, 75)
T1.insert(root, 150)
T1.insert(root, 85)
T1.insert(root, 175)
T1.insert(root, 95)
print("Inorder : ")
T1.Inorder(root)
print("\nPreorder:")
T1.preorder(root)
